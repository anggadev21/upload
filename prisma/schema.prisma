// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String         @id
  username     String?        @unique
  email        String?        @db.VarChar(200)
  password     String?        @db.VarChar(200)
  role         Role?
  employee_id  String         @unique
  employee     Employee?      @relation(name: "EmployeeToUser", fields: [employee_id], references: [id])
  created_at   DateTime       @default(now())
  updated_at   DateTime       @default(now())
  deleted_at   DateTime?
  session      Session[]      @relation(name: "SessionToUser")
  file         File[]         @relation(name: "FileToUser")
  file_visible File_visible[] @relation(name: "File_visibleToUser")

  @@map("user")
}

model Employee {
  id         String    @id
  user       User?     @relation(name: "EmployeeToUser")
  name       String?
  nik        String?
  divisi     String?
  position   String?
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  @@map("employee")
}

model Session {
  id           String    @id
  user_id      String?   @unique
  user         User?     @relation(name: "SessionToUser", fields: [user_id], references: [id])
  access_token String?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
  deleted_at   DateTime?

  @@map("session")
}

model File {
  id           String         @id
  url          String?
  url_preview  String?
  file_id      String?
  name         String?
  size         Float?         @default(0)
  type         String?
  user_id      String?
  created_by   User?          @relation(name: "FileToUser", fields: [user_id], references: [id])
  created_at   DateTime       @default(now())
  updated_at   DateTime       @default(now())
  deleted_at   DateTime?
  file_visible File_visible[] @relation(name: "FileToFile_visible")

  @@map("file")
}

model File_visible {
  id         String    @id
  user_id    String?
  user       User?     @relation(name: "File_visibleToUser", fields: [user_id], references: [id])
  file_id    String?
  file       File?     @relation(name: "FileToFile_visible", fields: [file_id], references: [id], onDelete: Cascade)
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  @@map("file_visible")
}

enum Role {
  Admin
  User
}
